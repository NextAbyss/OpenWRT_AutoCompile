#
# This is free software, lisence use MIT.
# 
# Copyright (C) 2019 P3TERX <https://p3terx.com>
# Copyright (C) 2020 KFERMercer <KFER.Mercer@gmail.com>
# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#

name: LEDE-CI

on:
  workflow_dispatch:
#  schedule:
#    - cron: 0 23 * * *
#
env:
  REPO_URL: https://github.com/coolsnowwolf/lede.git
  CONFIG_FILE: lede.config
  DIY_SCRIPT: lede_script.sh
  CACHE_TOOLCHAIN: true
  UPLOAD_BIN_DIR: false
  FIRMWARE_RELEASE: true
  FIRMWARE_TAG: X86_64
  TZ: Asia/Shanghai

jobs:

  build_openwrt:

    name: Build LEDE firmware
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
      - name: Check Server Performance
        run: |
          echo "警告⚠"
          echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
          echo -e "已知CPU型号(降序): 7763，8370C，8272CL，8171M，E5-2673\n"
          echo "--------------------------CPU信息--------------------------"
          echo "CPU物理数量: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
          echo "CPU核心数量: $(nproc)"
          echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
          echo "--------------------------内存信息--------------------------"
          echo "已安装内存详细信息:"
          echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
          echo "--------------------------硬盘信息--------------------------"
          echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

      - name: Checkout
        uses: actions/checkout@main

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* || true
          sudo -E apt-get update
          sudo apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
                              bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
                              git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev \
                              libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev \
                              libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python3 \
                              python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo \
                              uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          df -h

      - name: Clone Source Code
        run: |
          df -hT $GITHUB_WORKSPACE
          REPO_BRANCH=master
          echo "REPO_BRANCH=$REPO_BRANCH" >> $GITHUB_ENV
          echo "git clone $REPO_URL --single-branch --depth=1 -b $REPO_BRANCH lede"
          git clone $REPO_URL --single-branch --depth=1 -b $REPO_BRANCH lede
          ln -sf /mnt/workdir/lede $GITHUB_WORKSPACE/lede
          cd lede
          echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
          COMMIT_AUTHOR=$(git show -s --date=short --format="作者: %an")
          echo "COMMIT_AUTHOR=$COMMIT_AUTHOR" >> $GITHUB_ENV
          COMMIT_DATE=$(git show -s --date=short --format="时间: %ci")
          echo "COMMIT_DATE=$COMMIT_DATE" >> $GITHUB_ENV
          COMMIT_MESSAGE=$(git show -s --date=short --format="内容: %s")
          echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV
          COMMIT_HASH=$(git show -s --date=short --format="hash: %H")
          echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV

      - name: 真男人Cache！
        uses: klever1988/cachewrtbuild@main
        with:
          ccache: 'true'
          mixkey: ${{ env.FIRMWARE_TAG }}
          prefix: ${{ env.OPENWRT_PATH }}

      - name: Update feeds
        run: |
          cd $OPENWRT_PATH
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Load Custom Configuration
        run: |
          cd $GITHUB_WORKSPACE
          chmod +x $GITHUB_WORKSPACE/scripts/$DIY_SCRIPT
          cat $GITHUB_WORKSPACE/scripts/$DIY_SCRIPT
          cd $OPENWRT_PATH
          $GITHUB_WORKSPACE/scripts/$DIY_SCRIPT

      - name: Generate configuration file
        run: |
          cp $GITHUB_WORKSPACE/config/$CONFIG_FILE $OPENWRT_PATH/.config
          cd $OPENWRT_PATH
          make defconfig > /dev/null 2>&1
          SOURCE_REPO="$(echo $REPO_URL | awk -F '/' '{print $(NF)}')"
          echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
          DEVICE_TARGET=$(cat .config | grep CONFIG_TARGET_BOARD | awk -F '"' '{print $2}')
          echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
          DEVICE_SUBTARGET=$(cat .config | grep CONFIG_TARGET_SUBTARGET | awk -F '"' '{print $2}')
          echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV

          # ===============================================================
          # 

      - name: Make download
        run: |
          cd $OPENWRT_PATH
          make download -j8 || make download -j1 V=s
          rm -rf $(find ./dl/ -size -1024c)
          df -h

      - name: Compile firmware
        id: compile
        run: |
          cd $OPENWRT_PATH
          make -j$(nproc) || make -j1 V=s
          cd $OPENWRT_PATH/bin/targets/*/*
          echo "KERNEL=$(cat *.manifest | grep ^kernel | cut -d- -f2 | tr -d ' ')" >> $GITHUB_ENV
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h ./ --max-depth=1
          du -h /mnt/openwrt/ --max-depth=1 || true
          echo "DATE=$(date +"%Y.%m.%d_%H:%M")" >> $GITHUB_ENV

      - name: Prepare artifact
        run: |
          cd $OPENWRT_PATH
          mkdir -p ./artifact/firmware
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/
          echo "DATE_YMD=$(date +"%Y.%m.%d")" >> $GITHUB_ENV

      - name: Deliver buildinfo
        uses: actions/upload-artifact@main
        with:
          name: OpenWrt_buildinfo
          path: ${{ env.OPENWRT_PATH }}/artifact/buildinfo/

      - name: Deliver package
        uses: actions/upload-artifact@main
        with:
          name: OpenWrt_package
          path: ${{ env.OPENWRT_PATH }}/artifact/package/

      - name: Deliver firmware
        uses: actions/upload-artifact@main
        with:
          name: OpenWrt_firmware
          path: ${{ env.OPENWRT_PATH }}/bin/targets/
          
      - name: Upload release asset
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.OPENWRT_PATH }}/artifact/firmware/*
          tag: LEDE_${{ env.DATE_YMD }}
          file_glob: true
          body: |
            **🐱‍🏍🐱‍🏍🐱‍🏍 LEDE Firmware For ${{ env.FIRMWARE_TAG }} 🐱‍🏍🐱‍🏍🐱‍🏍**
            ###  ${{ env.DATE }} 
            - ⛄⛄ 平台架构: ${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }} ⛄⛄
            - 🦖🦖 固件源码: ${{ env.REPO_URL }} 🦖🦖
            - 😻💻 源码分支: ${{ env.REPO_BRANCH }} 💻😻
            - 🦝 内核版本: ${{ env.KERNEL }} 🦝
            - 🦈 默认地址: 192.168.50.10 🦈
            ### 🐱‍🚀 固件版本 🐱‍🚀
            - 固件编译前最后一次➦[主源码](${{ env.REPO_URL }})更新记录
            - ${{ env.COMMIT_AUTHOR }}
            - ${{ env.COMMIT_DATE }}
            - ${{ env.COMMIT_MESSAGE }}
            - ${{ env.COMMIT_HASH }}

      - name: Delete Old Workflows
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          retain_days: 0
          keep_minimum_runs: 2

      - name: Delete Old Releases
        uses: dev-drprasad/delete-older-releases@master
        with:
          keep_latest: 3
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
